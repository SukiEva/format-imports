// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CLI check [--check 1.ts a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/2.ts' is different after formatting.
'a/b/3.ts' is different after formatting.
",
  "stdout": "Checked 5 files, of which:
  1 file passed.
  2 files were excluded.
  2 files have formatting issues.
",
}
`;

exports[`CLI check [-c 1.ts a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/2.ts' is different after formatting.
'a/b/3.ts' is different after formatting.
",
  "stdout": "Checked 5 files, of which:
  1 file passed.
  2 files were excluded.
  2 files have formatting issues.
",
}
`;

exports[`CLI check 0-processed [--check a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 0 files.
",
}
`;

exports[`CLI check 0-processed [-c a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 0 files.
",
}
`;

exports[`CLI check 1-processed excluded [--check 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 1 file, of which:
  1 file was excluded.
",
}
`;

exports[`CLI check 1-processed excluded [-c 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 1 file, of which:
  1 file was excluded.
",
}
`;

exports[`CLI check 1-processed passed [--check 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 1 file, of which:
  1 file passed.
",
}
`;

exports[`CLI check 1-processed passed [-c 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 1 file, of which:
  1 file passed.
",
}
`;

exports[`CLI check 1-processed rejected [--check a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/1.ts' is different after formatting.
",
  "stdout": "Checked 1 file, of which:
  1 file has formatting issues.
",
}
`;

exports[`CLI check 1-processed rejected [-c a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/1.ts' is different after formatting.
",
  "stdout": "Checked 1 file, of which:
  1 file has formatting issues.
",
}
`;

exports[`CLI check 2-processed excluded [--check 1.ts a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 2 files, of which:
  2 files were excluded.
",
}
`;

exports[`CLI check 2-processed excluded [-c 1.ts a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 2 files, of which:
  2 files were excluded.
",
}
`;

exports[`CLI check 2-processed passed [--check 1.ts a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 2 files, of which:
  2 files passed.
",
}
`;

exports[`CLI check 2-processed passed [-c 1.ts a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "Checked 2 files, of which:
  2 files passed.
",
}
`;

exports[`CLI check 2-processed rejected [--check a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/1.ts' is different after formatting.
'a/b/2.ts' is different after formatting.
",
  "stdout": "Checked 2 files, of which:
  2 files have formatting issues.
",
}
`;

exports[`CLI check 2-processed rejected [-c a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/1.ts' is different after formatting.
'a/b/2.ts' is different after formatting.
",
  "stdout": "Checked 2 files, of which:
  2 files have formatting issues.
",
}
`;

exports[`CLI check config [--check --config c/import-sorter.json 1.ts a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/2.ts' is different after formatting.
'a/b/3.ts' is different after formatting.
",
  "stdout": "Checked 5 files, of which:
  1 file passed.
  2 files were excluded.
  2 files have formatting issues.
",
}
`;

exports[`CLI check config fileconfig [--check --config c/import-sorter.json 1.ts a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/2.ts' is different after formatting.
'a/b/3.ts' is different after formatting.
",
  "stdout": "Checked 5 files, of which:
  1 file passed.
  2 files were excluded.
  2 files have formatting issues.
",
}
`;

exports[`CLI check config force [--check --force --config c/import-sorter.json 1.ts a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/2.ts' is different after formatting.
'a/b/3.ts' is different after formatting.
'a/b/e1.ts' is different after formatting.
'a/e2.ts' is different after formatting.
",
  "stdout": "Checked 5 files, of which:
  1 file passed.
  4 files have formatting issues.
",
}
`;

exports[`CLI check config force [--check -f --config c/import-sorter.json 1.ts a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/2.ts' is different after formatting.
'a/b/3.ts' is different after formatting.
'a/b/e1.ts' is different after formatting.
'a/e2.ts' is different after formatting.
",
  "stdout": "Checked 5 files, of which:
  1 file passed.
  4 files have formatting issues.
",
}
`;

exports[`CLI check config nonexist [--check --config c/import-sorter.json a] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'c/import-sorter.json'
",
  "stdout": "",
}
`;

exports[`CLI check empty [--check] 1`] = `
Object {
  "status": 1,
  "stderr": "Expect at least 1 file or directory.
",
  "stdout": "",
}
`;

exports[`CLI check empty [-c] 1`] = `
Object {
  "status": 1,
  "stderr": "Expect at least 1 file or directory.
",
  "stdout": "",
}
`;

exports[`CLI check no-recursive [--check --no-recursive 1.ts a] 1`] = `
Object {
  "status": 1,
  "stderr": "'a/2.ts' is different after formatting.
",
  "stdout": "Checked 3 files, of which:
  1 file passed.
  1 file was excluded.
  1 file has formatting issues.
",
}
`;

exports[`CLI check nonexist [--check x.ts 1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "'x.ts' doesn't exist.
",
  "stdout": "Checked 1 file, of which:
  1 file passed.
",
}
`;

exports[`CLI check nonexist [-c xyz 1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "'xyz' doesn't exist.
",
  "stdout": "Checked 1 file, of which:
  1 file passed.
",
}
`;

exports[`CLI check unknown [--check /dev/null 1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "'/dev/null' is neither file nor directory.
",
  "stdout": "Checked 1 file, of which:
  1 file passed.
",
}
`;

exports[`CLI check unknown [-c /dev/null 1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "'/dev/null' is neither file nor directory.
",
  "stdout": "Checked 1 file, of which:
  1 file passed.
",
}
`;

exports[`CLI format directory [a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format directory config [--config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format directory config exclude [--config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format directory config exclude dry-run [--dry-run --config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
",
}
`;

exports[`CLI format directory config exclude dry-run [-d --config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
",
}
`;

exports[`CLI format directory config exclude force [--force --config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format directory config exclude force [-f --config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format directory config fileconfig [--config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format directory config nonexist [--config c/import-sorter.json a] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'c/import-sorter.json'
",
  "stdout": "",
}
`;

exports[`CLI format directory dry-run [--dry-run a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files will be modified.
",
}
`;

exports[`CLI format directory dry-run [-d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files will be modified.
",
}
`;

exports[`CLI format directory no-recursive [--no-recursive a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format directory no-recursive dry-run [--dry-run --no-recursive a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
",
}
`;

exports[`CLI format directory no-recursive dry-run [-d --no-recursive a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
",
}
`;

exports[`CLI format directory nonexist [a] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, stat 'a'
",
  "stdout": "",
}
`;

exports[`CLI format directory output [--output d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "3 files created.
",
}
`;

exports[`CLI format directory output [-o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "3 files created.
",
}
`;

exports[`CLI format directory output directory [--output d a/] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
1 file created.
",
}
`;

exports[`CLI format directory output directory [-o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
1 file created.
",
}
`;

exports[`CLI format directory output directory dry-run [--dry-run -o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
1 file will be created.
",
}
`;

exports[`CLI format directory output directory dry-run [-d -o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
1 file will be created.
",
}
`;

exports[`CLI format directory output dry-run [--dry-run -o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "3 files will be created.
",
}
`;

exports[`CLI format directory output dry-run [-d -o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "3 files will be created.
",
}
`;

exports[`CLI format directory output file [--dry-run -o d.txt a] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: 'd.txt' is not a directory.
",
  "stdout": "",
}
`;

exports[`CLI format directory output file [--output d.txt a] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: 'd.txt' is not a directory.
",
  "stdout": "",
}
`;

exports[`CLI format directory output file [-d -o d.txt a] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: 'd.txt' is not a directory.
",
  "stdout": "",
}
`;

exports[`CLI format directory output file [-o d.txt a] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: 'd.txt' is not a directory.
",
  "stdout": "",
}
`;

exports[`CLI format file [1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format file config [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format file config exclude [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.ts' is excluded by config.
No files modified.
",
}
`;

exports[`CLI format file config exclude force [--force --config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format file config exclude force [-f --config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format file config fileconfig [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format file config nonexist [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'a/import-sorter.json'
",
  "stdout": "",
}
`;

exports[`CLI format file dry-run [--dry-run 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file dry-run [-d 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file nonexist [1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, stat '1.ts'
",
  "stdout": "",
}
`;

exports[`CLI format file not-supported [1.txt] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.txt' is not a supported file type.
No files modified.
",
}
`;

exports[`CLI format file output [--output a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`CLI format file output [-o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`CLI format file output directory [--output a/ 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`CLI format file output directory [-o a 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`CLI format file output directory dry-run [--dry-run -o a 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file output directory dry-run [-d -o a 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file output dry-run [--dry-run -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file output dry-run [-d -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file output file [--output a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format file output file [-o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format file output file dry-run [--dry-run -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file output file dry-run [-d -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file output file equal [--output a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "No files modified.
",
}
`;

exports[`CLI format file output file equal [-o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "No files modified.
",
}
`;

exports[`CLI format file output file equal dry-run [--dry-run -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format file output file equal dry-run [-d -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format files [1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format files config [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format files config exclude [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'a/2.ts' is excluded by config.
1 file modified.
",
}
`;

exports[`CLI format files config exclude force [--force --config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format files config exclude force [-f --config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format files config fileconfig [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`CLI format files config nonexist [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'c/import-sorter.json'
",
  "stdout": "",
}
`;

exports[`CLI format files dry-run [--dry-run 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.ts' will be modified.
",
}
`;

exports[`CLI format files dry-run [-d 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.ts' will be modified.
",
}
`;

exports[`CLI format files nonexist [1.ts a/2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, stat 'a/2.ts'
",
  "stdout": "",
}
`;

exports[`CLI format files nonfile [1.ts a/2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option: 'a/2.ts' is not a file.",
  "stdout": "",
}
`;

exports[`CLI format files output [--dry-run -o abc 1.ts 2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: should be empty if multiple files are provided.",
  "stdout": "",
}
`;

exports[`CLI format files output [-d -o abc 1.ts 2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: should be empty if multiple files are provided.",
  "stdout": "",
}
`;

exports[`CLI format files output [-o abc 1.ts 2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: should be empty if multiple files are provided.",
  "stdout": "",
}
`;

exports[`CLI format stdin [] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin config [--config import-sorter.json] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B
  from 'a';
import A
  from 'b';
import {
  C,
} from 'c';

export {
  A,
  B,
  C,
};
",
}
`;

exports[`CLI format stdin config nonexist [--config import-sorter.json] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'import-sorter.json'
",
  "stdout": "",
}
`;

exports[`CLI format stdin dry-run [--dry-run] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin dry-run [-d] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin extension error [--extension xyz] 1`] = `
Object {
  "status": 1,
  "stderr": "Option extension: 'xyz' not one of ts, tsx, js, or jsx.

format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.
format-imports -c [options] FILE/DIR [FILE/DIR ...]
    Check if files (under directories) are formatted.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --check                Check if files/directories are formatted.
  --config path::String      Path to base config file, e.g. import-sorter.json. The formatted file's config will be merged into this base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  --no-recursive             Format directory recursively or not.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`CLI format stdin extension error [-e xyz] 1`] = `
Object {
  "status": 1,
  "stderr": "Option extension: 'xyz' not one of ts, tsx, js, or jsx.

format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.
format-imports -c [options] FILE/DIR [FILE/DIR ...]
    Check if files (under directories) are formatted.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --check                Check if files/directories are formatted.
  --config path::String      Path to base config file, e.g. import-sorter.json. The formatted file's config will be merged into this base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  --no-recursive             Format directory recursively or not.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`CLI format stdin extension js [--extension js] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin extension js [-e js] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin extension jsx [--extension jsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin extension jsx [-e jsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin extension ts [--extension ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin extension ts [-e ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin extension tsx [--extension tsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin extension tsx [-e tsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin output [--output 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`CLI format stdin output [-o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`CLI format stdin output directory [--output 1] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: '1' is not a file.
",
  "stdout": "",
}
`;

exports[`CLI format stdin output directory [-o 1] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: '1' is not a file.
",
  "stdout": "",
}
`;

exports[`CLI format stdin output dry-run [--dry-run -o 1.ts ] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin output dry-run [-d -o 1.ts ] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin output file [--output 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format stdin output file [-o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`CLI format stdin output file dry-run [--dry-run -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin output file dry-run [-d -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin output file equal [--output 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "No files modified.
",
}
`;

exports[`CLI format stdin output file equal [-o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "No files modified.
",
}
`;

exports[`CLI format stdin output file equal dry-run [--dry-run -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI format stdin output file equal dry-run [-d -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`CLI help [--help] 1`] = `
Object {
  "status": 1,
  "stderr": "format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.
format-imports -c [options] FILE/DIR [FILE/DIR ...]
    Check if files (under directories) are formatted.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --check                Check if files/directories are formatted.
  --config path::String      Path to base config file, e.g. import-sorter.json. The formatted file's config will be merged into this base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  --no-recursive             Format directory recursively or not.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`CLI help [-h] 1`] = `
Object {
  "status": 1,
  "stderr": "format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.
format-imports -c [options] FILE/DIR [FILE/DIR ...]
    Check if files (under directories) are formatted.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --check                Check if files/directories are formatted.
  --config path::String      Path to base config file, e.g. import-sorter.json. The formatted file's config will be merged into this base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  --no-recursive             Format directory recursively or not.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;
