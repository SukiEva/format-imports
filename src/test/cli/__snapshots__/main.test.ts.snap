// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli/format directory [a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format directory config [--config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format directory config exclude [--config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format directory config exclude dry-run [--dry-run --config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
",
}
`;

exports[`cli/format directory config exclude dry-run [-d --config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
",
}
`;

exports[`cli/format directory config exclude force [--force --config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format directory config exclude force [-f --config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format directory config fileconfig [--config c/import-sorter.json a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format directory config nonexist [--config c/import-sorter.json a] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'c/import-sorter.json'
",
  "stdout": "",
}
`;

exports[`cli/format directory dry-run [--dry-run a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files will be modified.
",
}
`;

exports[`cli/format directory dry-run [-d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files will be modified.
",
}
`;

exports[`cli/format directory no-recursive [--no-recursive a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format directory no-recursive dry-run [--dry-run --no-recursive a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
",
}
`;

exports[`cli/format directory no-recursive dry-run [-d --no-recursive a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
",
}
`;

exports[`cli/format directory nonexist [a] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, stat 'a'
",
  "stdout": "",
}
`;

exports[`cli/format directory output [--output d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "3 files created.
",
}
`;

exports[`cli/format directory output [-o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "3 files created.
",
}
`;

exports[`cli/format directory output directory [--output d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
1 file created.
",
}
`;

exports[`cli/format directory output directory [-o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
1 file created.
",
}
`;

exports[`cli/format directory output directory dry-run [--dry-run -o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
1 file will be created.
",
}
`;

exports[`cli/format directory output directory dry-run [-d -o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file will be modified.
1 file will be created.
",
}
`;

exports[`cli/format directory output dry-run [--dry-run -o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "3 files will be created.
",
}
`;

exports[`cli/format directory output dry-run [-d -o d a] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "3 files will be created.
",
}
`;

exports[`cli/format directory output file [--dry-run -o d.txt a] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: 'd.txt' is not a directory.
",
  "stdout": "",
}
`;

exports[`cli/format directory output file [--output d.txt a] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: 'd.txt' is not a directory.
",
  "stdout": "",
}
`;

exports[`cli/format directory output file [-d -o d.txt a] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: 'd.txt' is not a directory.
",
  "stdout": "",
}
`;

exports[`cli/format directory output file [-o d.txt a] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: 'd.txt' is not a directory.
",
  "stdout": "",
}
`;

exports[`cli/format file [1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format file config [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format file config exclude [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.ts' is excluded by config.
No files modified.
",
}
`;

exports[`cli/format file config exclude force [--force --config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format file config exclude force [-f --config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format file config fileconfig [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format file config nonexist [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'a/import-sorter.json'
",
  "stdout": "",
}
`;

exports[`cli/format file dry-run [--dry-run 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file dry-run [-d 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file nonexist [1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, stat '1.ts'
",
  "stdout": "",
}
`;

exports[`cli/format file not-supported [1.txt] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.txt' is not a supported file type.
No files modified.
",
}
`;

exports[`cli/format file output [--output a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`cli/format file output [-o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`cli/format file output directory [--output a 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`cli/format file output directory [-o a 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`cli/format file output directory dry-run [--dry-run -o a 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file output directory dry-run [-d -o a 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file output dry-run [--dry-run -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file output dry-run [-d -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file output file [--output a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format file output file [-o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format file output file dry-run [--dry-run -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file output file dry-run [-d -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file output file equal [--output a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "No files modified.
",
}
`;

exports[`cli/format file output file equal [-o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "No files modified.
",
}
`;

exports[`cli/format file output file equal dry-run [--dry-run -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format file output file equal dry-run [-d -o a/2.ts 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format files [1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format files config [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format files config exclude [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'a/2.ts' is excluded by config.
1 file modified.
",
}
`;

exports[`cli/format files config exclude force [--force --config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format files config exclude force [-f --config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format files config fileconfig [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "2 files modified.
",
}
`;

exports[`cli/format files config nonexist [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'c/import-sorter.json'
",
  "stdout": "",
}
`;

exports[`cli/format files dry-run [--dry-run 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.ts' will be modified.
",
}
`;

exports[`cli/format files dry-run [-d 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.ts' will be modified.
",
}
`;

exports[`cli/format files nonexist [1.ts a/2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, stat 'a/2.ts'
",
  "stdout": "",
}
`;

exports[`cli/format files nonfile [1.ts a/2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option: 'a/2.ts' is not a file.",
  "stdout": "",
}
`;

exports[`cli/format files output [--dry-run -o abc 1.ts 2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: should be empty if multiple files are provided.",
  "stdout": "",
}
`;

exports[`cli/format files output [-d -o abc 1.ts 2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: should be empty if multiple files are provided.",
  "stdout": "",
}
`;

exports[`cli/format files output [-o abc 1.ts 2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: should be empty if multiple files are provided.",
  "stdout": "",
}
`;

exports[`cli/format help [--help] 1`] = `
Object {
  "status": 1,
  "stderr": "format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.
format-imports -c [options] FILE/DIR [FILE/DIR ...]
    Check if files (under directories) are formatted.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --check                Check if files/directories are formatted.
  --config path::String      Path to base config file, e.g. import-sorter.json. The formatted file's config will be merged into this base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  --no-recursive             Format directory recursively or not.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`cli/format help [-h] 1`] = `
Object {
  "status": 1,
  "stderr": "format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.
format-imports -c [options] FILE/DIR [FILE/DIR ...]
    Check if files (under directories) are formatted.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --check                Check if files/directories are formatted.
  --config path::String      Path to base config file, e.g. import-sorter.json. The formatted file's config will be merged into this base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  --no-recursive             Format directory recursively or not.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`cli/format stdin [] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin config [--config import-sorter.json] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B
  from 'a';
import A
  from 'b';
import {
  C,
} from 'c';

export {
  A,
  B,
  C,
};
",
}
`;

exports[`cli/format stdin config nonexist [--config import-sorter.json] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, open 'import-sorter.json'
",
  "stdout": "",
}
`;

exports[`cli/format stdin dry-run [--dry-run] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin dry-run [-d] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin extension error [--extension xyz] 1`] = `
Object {
  "status": 1,
  "stderr": "Option extension: 'xyz' not one of ts, tsx, js, or jsx.

format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.
format-imports -c [options] FILE/DIR [FILE/DIR ...]
    Check if files (under directories) are formatted.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --check                Check if files/directories are formatted.
  --config path::String      Path to base config file, e.g. import-sorter.json. The formatted file's config will be merged into this base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  --no-recursive             Format directory recursively or not.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`cli/format stdin extension error [-e xyz] 1`] = `
Object {
  "status": 1,
  "stderr": "Option extension: 'xyz' not one of ts, tsx, js, or jsx.

format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.
format-imports -c [options] FILE/DIR [FILE/DIR ...]
    Check if files (under directories) are formatted.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --check                Check if files/directories are formatted.
  --config path::String      Path to base config file, e.g. import-sorter.json. The formatted file's config will be merged into this base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  --no-recursive             Format directory recursively or not.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`cli/format stdin extension js [--extension js] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin extension js [-e js] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin extension jsx [--extension jsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin extension jsx [-e jsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin extension ts [--extension ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin extension ts [-e ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin extension tsx [--extension tsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin extension tsx [-e tsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin output [--output 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`cli/format stdin output [-o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file created.
",
}
`;

exports[`cli/format stdin output directory [--output 1] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: '1' is not a file.
",
  "stdout": "",
}
`;

exports[`cli/format stdin output directory [-o 1] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: '1' is not a file.
",
  "stdout": "",
}
`;

exports[`cli/format stdin output dry-run [--dry-run -o 1.ts ] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin output dry-run [-d -o 1.ts ] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin output file [--output 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format stdin output file [-o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "1 file modified.
",
}
`;

exports[`cli/format stdin output file dry-run [--dry-run -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin output file dry-run [-d -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin output file equal [--output 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "No files modified.
",
}
`;

exports[`cli/format stdin output file equal [-o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "No files modified.
",
}
`;

exports[`cli/format stdin output file equal dry-run [--dry-run -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format stdin output file equal dry-run [-d -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format version [--version] 1`] = `
Object {
  "status": 1,
  "stderr": "v1.0.0
",
  "stdout": "",
}
`;

exports[`cli/format version [-v] 1`] = `
Object {
  "status": 1,
  "stderr": "v1.0.0
",
  "stdout": "",
}
`;
