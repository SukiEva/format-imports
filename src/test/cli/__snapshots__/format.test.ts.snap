// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli/format-imports file [1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports file config [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports file config [-c a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports file config exclude [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.ts' is excluded by config.
",
}
`;

exports[`cli/format-imports file config exclude [-c a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'1.ts' is excluded by config.
",
}
`;

exports[`cli/format-imports file config exclude force [--force -c a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports file config exclude force [-f -c a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports file config file [--config a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports file config file [-c a/import-sorter.json 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports file nonexist [1.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, stat '1.ts'
",
  "stdout": "",
}
`;

exports[`cli/format-imports files [1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports files config [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports files config [-c c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports files config exclude [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'a/2.ts' is excluded by config.
",
}
`;

exports[`cli/format-imports files config exclude [-c c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "'a/2.ts' is excluded by config.
",
}
`;

exports[`cli/format-imports files config exclude force [--force -c c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports files config exclude force [-f -c c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports files config file [--config c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports files config file [-c c/import-sorter.json 1.ts a/2.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports files nonexist [1.ts a/2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "ENOENT: no such file or directory, stat 'a/2.ts'
",
  "stdout": "",
}
`;

exports[`cli/format-imports files nonfile [1.ts a/2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option: 'a/2.ts' is not a file.",
  "stdout": "",
}
`;

exports[`cli/format-imports files output [-o abc 1.ts 2.ts] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: should be empty if multiple files are provided.",
  "stdout": "",
}
`;

exports[`cli/format-imports help [--help] 1`] = `
Object {
  "status": 1,
  "stderr": "format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --config path::String  Read base config from a file, e.g. import-sorter.json. Each source file can have specific config which will be merged into the base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  -r, --recursive            Format directories recursively.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`cli/format-imports help [-h] 1`] = `
Object {
  "status": 1,
  "stderr": "format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --config path::String  Read base config from a file, e.g. import-sorter.json. Each source file can have specific config which will be merged into the base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  -r, --recursive            Format directories recursively.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin [] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin config [--config import-sorter.json] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B
  from 'a';
import A
  from 'b';
import {
  C,
} from 'c';

export {
  A,
  B,
  C,
};
",
}
`;

exports[`cli/format-imports stdin config [-c import-sorter.json] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B
  from 'a';
import A
  from 'b';
import {
  C,
} from 'c';

export {
  A,
  B,
  C,
};
",
}
`;

exports[`cli/format-imports stdin dry-run [--dry-run] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin dry-run [-d] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin extension error [--extension xyz] 1`] = `
Object {
  "status": 1,
  "stderr": "Option extension: 'xyz' not one of ts, tsx, js, or jsx.

format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --config path::String  Read base config from a file, e.g. import-sorter.json. Each source file can have specific config which will be merged into the base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  -r, --recursive            Format directories recursively.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin extension error [-e xyz] 1`] = `
Object {
  "status": 1,
  "stderr": "Option extension: 'xyz' not one of ts, tsx, js, or jsx.

format-imports [options] [FILE ...]
    Format given file(s). If no files provided, read from STDIN.
format-imports [options] DIR
    Format supported files under given directory.

  -h, --help                 Show help.
  -v, --version              Show version number.
  -c, --config path::String  Read base config from a file, e.g. import-sorter.json. Each source file can have specific config which will be merged into the base config.
  -f, --force                Always format file(s) regardless of exclude config and file disable comments. Statement level disable comments will still work.
  -e, --extension String     File extension assumed when reading from STDIN and output file extension is unknown. - either: ts, tsx, js, or jsx - default: ts
  -r, --recursive            Format directories recursively.
  -o, --output path::String  Specify the output file or directory.
  -d, --dry-run              Test running without changing any files.
",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin extension js [--extension js] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin extension js [-e js] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin extension jsx [--extension jsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin extension jsx [-e jsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin extension ts [--extension ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin extension ts [-e ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin extension tsx [--extension tsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin extension tsx [-e tsx] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin output [--output 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin output [-o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin output directory [--output 1] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: '1' is not a file.
",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin output directory [-o 1] 1`] = `
Object {
  "status": 1,
  "stderr": "Option output: '1' is not a file.
",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin output dry-run [--dry-run -o 1.ts ] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin output dry-run [-d -o 1.ts ] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin output file [--output 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin output file [-o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "",
}
`;

exports[`cli/format-imports stdin output file dry-run [--dry-run -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports stdin output file dry-run [-d -o 1.ts] 1`] = `
Object {
  "status": 0,
  "stderr": "",
  "stdout": "import B from 'a';
import A from 'b';
import { C } from 'c';

export { A, B, C };
",
}
`;

exports[`cli/format-imports version [--version] 1`] = `
Object {
  "status": 1,
  "stderr": "v1.0.0
",
  "stdout": "",
}
`;

exports[`cli/format-imports version [-v] 1`] = `
Object {
  "status": 1,
  "stderr": "v1.0.0
",
  "stdout": "",
}
`;
